data Nat : ∗ where
| zero : Nat
| succ : Nat → Nat

let three = succ (succ (succ zero))

data List : ∗ → ∗ where
| nil  : [a] → List a
| (::) : [a] → a → List a → List a

let nums : List Nat = zero :: succ zero :: succ (succ zero) :: three :: nil


(* EXPERIMENTAL pattern matching *)
let rec nat_add (a : Nat) (b : Nat) : Nat =
  match a with
  | zero . b
  | succ a' . succ (nat_add a' b)
  end

let rec list_concat [T : ∗] (xs : List T) (ys : List T) : List T =
  match xs with
  | nil [S] . ys
  | (::) [S] x xs' . x :: list_concat xs' ys
  end