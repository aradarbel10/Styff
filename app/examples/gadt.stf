postulate (+) : int → int → int
postulate ( * ) : int → int → int
postulate (==) : {a : ∗} → a → a → bool

data Expr : ∗ → ∗ where
| I : int → Expr int
| B : bool → Expr bool
| Add : Expr int → Expr int → Expr int
| Mul : Expr int → Expr int → Expr int
| Eq : {a} → Expr a → Expr a → Expr bool

let rec eval {a : ∗} (expr : Expr a) : a =
  match expr with
  | I n . n
  | B b . b
  | Add e1 e2 . eval e1 + eval e2
  | Mul e1 e2 . eval e1 * eval e2
  | Eq e1 e2 . eval e1 == eval e2
  end



data Exists : (∗ → ∗) → ∗ where
| pair : {A : ∗} → {f : ∗ → ∗} → f A → Exists f

let double_it : Exists (λt. t → int) = pair {int} {λt. t → int} (λn. n * 2)




data T : ∗ where
| T1 : {A : ∗} → A → (A → int) → T
(* the type var A here is an existential *)

let escapes (t : T) =
  match t with
  | T1 a f . f a
  end