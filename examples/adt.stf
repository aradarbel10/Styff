data Nat : ∗ where
| zero : Nat
| succ : Nat → Nat

let three = succ (succ (succ zero))

data List : ∗ → ∗ where
| nil  : {A : ∗} → List A
| (::) : {A : ∗} → A → List A → List A

let nums : List Nat = zero :: succ zero :: succ (succ zero) :: three :: nil

(* pattern matching *)
let rec nat_add (a : Nat) (b : Nat) : Nat =
  match a with
  | zero . b
  | succ a' . succ (nat_add a' b)
  end

let rec list_concat {T : ∗} (xs : List T) (ys : List T) : List T =
  match xs with
  | nil . ys
  | x :: xs' . x :: (list_concat xs' ys)
  end

print three
print nat_add three three
print list_concat nums nums

(* GADTs *)
data T : ∗ → ∗ where
| T1 : {a} → a → T a
| T2 : builtin.int → T builtin.bool

let useT {b : ∗} (t : T b) : b =
  match t with
  | T1 x . x
  | T2 n . builtin.bool-true
  end